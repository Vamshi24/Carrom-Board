#include <iostream>
#include <cmath>
#include <GL/glut.h>
#include <stdio.h>
#include "box1.h"
using namespace std;

#define PI 3.141592653589
#define DEG2RAD(deg) (deg * PI / 180)

void init();
void initRendering();
void handleResize(int w,int h);
void handleKeypress1(int key, int x, int y);
void handleKeypress2(unsigned char key, int x, int y);
void update(int value);
void drawScene();
void drawBoxes();
void drawHoles();
void drawRings();
void drawCoins();

Box outerBox(0,6.0f),innerBox(0,5.50f),innerBox1(1,4.50f);
Hole holes[4];
Circle rings[4],centre;
Coin coins[9];
Striker strike;
float lx = 0.0f;
float ly = 0.16f;
float theta = 0.0f;

int main(int argc, char **argv) {

    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);

    int w = glutGet(GLUT_SCREEN_WIDTH);
    int h = glutGet(GLUT_SCREEN_HEIGHT);
    int windowWidth = w * 2 / 3;
    int windowHeight = h * 2 / 3;

    glutInitWindowSize(windowWidth, windowHeight);
    glutInitWindowPosition((w - windowWidth) / 2, (h - windowHeight) / 2);

    glutCreateWindow("Carrom Board");  // Setup the window
    initRendering();

    init();
    // Register callbacks
    glutDisplayFunc(drawScene);
    glutIdleFunc(drawScene);
    glutReshapeFunc(handleResize);
    glutSpecialFunc(handleKeypress1);
    glutKeyboardFunc(handleKeypress2);
//    glutMouseFunc(handleMouseclick);
    glutTimerFunc(10, update, 0);

    glutMainLoop();
    return 0;
}

void initRendering() {

    glEnable(GL_DEPTH_TEST);        // Enable objects to be drawn ahead/behind one another
    glEnable(GL_COLOR_MATERIAL);    // Enable coloring
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);   // Setting a background color
}
void init()
{
	outerBox.setTranslationMatrix(0.0f ,0.0f, -8.0f);
    outerBox.setColor(0.545f,0.270f,0.074f);

    innerBox.setTranslationMatrix(0.0f,0.0f,-8.0f);
    innerBox.setColor(0.8235f,0.5215f,0.2470f);

    innerBox1.setTranslationMatrix(0.0f,0.0f,-8.0f);
    innerBox1.setColor(0.0f,0.0f,0.0f);	

    // holes
    float x1 = -2.55f , y1 = 2.55f;
    for (int i = 0; i < 4; i++)
    {
    	holes[i].setTranslationMatrix(x1,y1,-8.0f);
    	holes[i].setColor(0.0f,0.0f,0.0f);
    	holes[i].setRadius(0.20f);
    	float temp = x1;
    	x1 = -(y1);
        y1 = (temp);
    }

    // rings
    x1 = -2.12f ; y1 = 2.12f;
    for (int i = 0; i < 4; i++)
    {
    	rings[i].setTranslationMatrix(x1,y1,-8.0f);
    	rings[i].setColor(0.545f,0.0f,0.0f);
    	rings[i].setRadius(0.13f);
    	float temp = x1;
    	x1 = -(y1);
        y1 = (temp);
    }
    
    //circle
 	centre.setTranslationMatrix(0.0f,0.0f,-8.0f);
 	centre.setColor(0.0,0.0,0.0);
 	centre.setRadius(0.50f);

    //coins
    x1 = 0.0f; y1 = 0.4f;
    float x0,y0;
    for (int i = 0; i < 9; ++i)
    {
    	if(i == 0)
    	{
    		coins[0].setTranslationMatrix(0.0f,0.0f,-8.0f);
	        coins[0].setColor(1.0f,0.0f,0.0f);
		    coins[0].setRadius(0.1f);
    	}
    	else
    	{
    		coins[i].setTranslationMatrix(x1,y1,-8.0f);
    		if (i%2==1)
    			coins[i].setColor(0.0f,0.0f,0.0f);
    		else
    			coins[i].setColor(1.0f,1.0f,1.0f);
    		coins[i].setRadius(0.1f);
    		x0 = (x1)*cos(DEG2RAD(45)) - (y1)*sin(DEG2RAD(45));
    		y0 = (x1)*sin(DEG2RAD(45)) + (y1)*cos(DEG2RAD(45));
    		x1 = x0;
    		y1 = y0;
    	}
    }

    //striker
    x1 = 0.0f; y1 = -2.09f;
    strike.setTranslationMatrix(x1,y1,-8.0f);
    strike.setColor(0.501f,0.501f,0.501f);
    strike.setRadius(0.16f);
}
void drawScene() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    
    drawBoxes();
 	drawHoles();
 	drawRings();
 	// draw circle
 	glPushMatrix();
 	centre.setTranslationMatrix(centre.cx,centre.cy,centre.cz);
 	centre.setColor(centre.red,centre.green,centre.blue);
 	centre.drawCircle(centre.radius,1);
 	glPopMatrix();
 
  	drawCoins();
 	
 	//draw striker
 	glPushMatrix();
 	strike.setTranslationMatrix(strike.cx,strike.cy,strike.cz);
 	strike.setColor(strike.red,strike.green,strike.blue);
 	strike.drawCircle(strike.radius,0);
 	glPopMatrix();

 	glPushMatrix();
   	glTranslatef(strike.cx,strike.cy,strike.cz);
  	glRotatef(theta, 0.0f, 0.0f, 1.0f);
	glColor3f(0.0f,0.0f,0.0f);
	glBegin(GL_LINES);
	glVertex2f(0.0f,0.0f);
	glVertex2f(lx,ly);
	glEnd();
	glPopMatrix();

    glutSwapBuffers();
}
void drawBoxes()
{
	glPushMatrix();
    outerBox.setTranslationMatrix(outerBox.box_x,outerBox.box_y,outerBox.box_z);
    outerBox.setColor(outerBox.red,outerBox.green,outerBox.blue);
    outerBox.drawBox(outerBox.box_len);
    glPopMatrix();

    glPushMatrix();
    innerBox.setTranslationMatrix(innerBox.box_x,innerBox.box_y,innerBox.box_z);
    innerBox.setColor(innerBox.red,innerBox.green,innerBox.blue);
    innerBox.drawBox(innerBox.box_len);
    glPopMatrix();

    glPushMatrix();
    innerBox1.setTranslationMatrix(innerBox1.box_x,innerBox1.box_y,innerBox1.box_z);
    innerBox1.setColor(innerBox1.red,innerBox1.green,innerBox1.blue);
    innerBox1.drawBox(innerBox1.box_len);
    glPopMatrix();
}
void drawHoles()
{
 for (int i = 0; i < 4; i++)
	{
		glPushMatrix();
		holes[i].setTranslationMatrix(holes[i].cx,holes[i].cy,holes[i].cz);
		holes[i].setColor(holes[i].red,holes[i].green,holes[i].blue);
		holes[i].drawCircle(holes[i].radius,0);
		glPopMatrix();
	}
}
void drawRings()
{
	for (int i = 0; i < 4; i++)
	{
		glPushMatrix();
		rings[i].setTranslationMatrix(rings[i].cx,rings[i].cy,rings[i].cz);
		rings[i].setColor(rings[i].red,rings[i].green,rings[i].blue);
		rings[i].drawCircle(rings[i].radius,0);
		glPopMatrix();
	}
}
void drawCoins()
{
	for (int i = 0; i < 9; i++)
	{
		glPushMatrix();
		coins[i].setTranslationMatrix(coins[i].cx,coins[i].cy,coins[i].cz);
		coins[i].setColor(coins[i].red,coins[i].green,coins[i].blue);
		coins[i].drawCircle(coins[i].radius,0);
		glPopMatrix();
	}
}
void handleResize(int w,int h)
{
	glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, (float)w / (float)h, 0.1f, 200.0f);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}
void handleKeypress1(int key, int x, int y)
{
	if(key == GLUT_KEY_LEFT)
		strike.cx -=0.1f;
	if (key == GLUT_KEY_RIGHT)
		 strike.cx +=0.1f;
}
void handleKeypress2(unsigned char key, int x, int y) {

    if (key == 27) 
        exit(0);     // escape key is pressed
    if (key == 97)
    	theta += 5;
    if (key == 99)
    	theta -= 5;
    if(key == 32)
    {
    	printf("space hit\n" );
    	strike.velx = (0.01)*sin(DEG2RAD(theta));
    	strike.vely = (0.01)*cos(DEG2RAD(theta));
    	printf("%f %f\n",strike.velx,strike.vely );
    }
}
void update(int value)
{
	printf("yes\n");
	if(strike.velx !=0.0f || strike.vely !=0.0f)
	{
		printf("entered\n");
    	if (strike.cx + strike.radius > innerBox1.box_len/2 || strike.cx - strike.radius < -innerBox1.box_len/2)
    		strike.velx *=-1;
    	if (strike.cy + strike.radius > innerBox1.box_len/2 || strike.cy - strike.radius < -innerBox1.box_len/2)
    		strike.vely *=-1;
		strike.cx += strike.velx;
		strike.cy += strike.vely;

		strike.velx -=0.0002;
		strike.vely -=0.0002;
	}
}
