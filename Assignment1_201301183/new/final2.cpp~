#include <iostream>
#include <cmath>
#include <GL/glut.h>
#include <stdio.h>
#include "box1.h"
#include "hole1.h"
using namespace std;
#define PI 3.141592653589
#define DEG2RAD(deg) (deg * PI / 180)
Box u,u1,u2,u3;
hole hol[4],s[1],hole[8],coin[9],p,circle;
float tri_x = 0.0f;
float tri_y = -6.25f;
float theta = 0.0f;
float power_ball=-0.6f;
float pointer=-6.75f; 

void initRendering() 
{
	glEnable(GL_DEPTH_TEST);        // Enable objects to be drawn ahead/behind one another
	glEnable(GL_COLOR_MATERIAL);    // Enable coloring
	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);   // Setting a background color(white)
}

void drawScene1()
{
	//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();    
	// cream color of the board
	glPushMatrix();
	glTranslatef(-0.2f, 0.0f, 0.0f);
	glBegin(GL_QUADS);
	glColor3f(0.2f, 0.0f, 0.0f);
	glVertex2f(-0.55f  , -0.75f);
	glVertex2f(-0.55f , 0.75f);
	glVertex2f(0.55f , 0.75f);
	glVertex2f(0.55f , -0.75f);
	glEnd();
	glPopMatrix();
	// brown-color border of the board
	glPushMatrix();
	glTranslatef(-0.2f, 0.0f, 0.0f);
	glBegin(GL_QUADS);
	glColor3f(1.0f, 0.8f, 0.45f);
	glVertex2f(-0.5f , -0.7f);
	glVertex2f(-0.5f , 0.7f);
	glVertex2f(0.5f , 0.7f);
	glVertex2f(0.5f , -0.7f);
	glEnd();
	glPopMatrix();
}

void drawScene() 
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity(); 
	//cream color of the board
	glPushMatrix();
	glTranslatef(-2.2f, 0.0f, -8.0f);
	glBegin(GL_QUADS);
	glColor3f(0.0f, 0.0f, 0.0f);
	glVertex2f(-3.0f  , -3.0f);
	glVertex2f(-3.0f , 3.0f);
	glVertex2f(3.0f , 3.0f);
	glVertex2f(3.0f , -3.0f);
	glEnd();
	glPopMatrix();
	//brown-color border of the board
	glPushMatrix();
	glTranslatef(-2.2f, 0.0f, -8.0f);
	glBegin(GL_QUADS);
	glColor3f(1.0f, 0.8f, 0.45f);
	glVertex2f(-2.75f , -2.75f);
	glVertex2f(-2.75f , 2.75f);
	glVertex2f(2.75f , 2.75f);
	glVertex2f(2.75f , -2.75f);
	// glVertex2f(-0.2f,-0.2f);
	// glVertex2f(-0.2f,0.2f);
	// glVertex2f(0.2f,0.2f);
	// glVertex2f(0.2f,-0.2f);
	glEnd();
	glPopMatrix();
	//holes
	float r1=5.1f,r2=5.1f;
        glTranslatef(-4.4f, 0.0f, -8.0f);
	for(int i=0;i<4;i++)
	{
	glPushMatrix();
	hol[i].drawhole(r2,r1,-8.0f,0.0f,0.0f,0.0f,0.37f);
	float temp1 = r2;
	r2 = -r1;
	r1 = temp1;
	glPopMatrix();
	}

	glPushMatrix();
	glTranslatef(-2.35f, 0.5f, -8.0f);
	circle.drawCircle(0.0f,0.0f,-8.0f,0.0f,0.0f,0.0f,2.50f);
	glPopMatrix();

	// coins
	float s3=2.200f,s2=0.0f,s0=1.55f,s1=1.55f;
	glTranslatef(-2.35f, 0.5f, -8.0f);
	for(int i=0;i<10;i++)
	{
		if(i<4)
		{
			glPushMatrix();
			coin[i].drawcoin(s0,s1,-8.0f,0.0f,0.0f,0.0f,0.35f);
			float temp = s0;
			s0 = -s1;
			s1 = temp;
			glPopMatrix();
		}
		else if(i>4 && i<9)
		{
			glPushMatrix();
			coin[i].drawcoin(s3,s2,-8.0f,0.8f,0.4f,0.0f,0.35f);
			float temp = s3;
			s3 = -s2;
			s2 = temp;
			glPopMatrix();
		}
		else if(i == 9)
		{
			glPushMatrix();
			coin[i].drawcoin(0.0f,0.0f,-8.0f,1.0f,0.0f,0.0f,0.35f);
			glPopMatrix();
		}
	}
	//striker box
	glPushMatrix();
	u.drawstrikerbox(10.0f,0.9f,0.0f,5.25f,-8.0f,0.0f,0.0f,0.0f);
	glPopMatrix();
	//striker box
	glPushMatrix();
	u1.drawstrikerbox(10.0f,0.9f,0.0f,-6.25f,-8.0f,0.0f,0.0f,0.0f);
	glPopMatrix();
	//striker box
	glPushMatrix();
	u2.drawstrikerbox(0.9f,10.0f,5.65f,-0.5f,-8.0f,0.0f,0.0f,0.0f);
	glPopMatrix();
	//striker box
	glPushMatrix();
	u3.drawstrikerbox(0.9f,10.0f,-5.65f,-0.5f,-8.0f,0.0f,0.0f,0.0f);
	glPopMatrix();
	glPushMatrix();
	hole[0].drawhole(-5.25f,-6.25f,-8.0f,1.0f,0.0f,0.0f,0.5f);
	glPopMatrix();
	glPushMatrix();
	hole[1].drawhole(-5.635f,-5.25f,-8.0f,1.0f,0.0f,0.0f,0.5f);
	glPopMatrix();
	glPushMatrix();
	hole[2].drawhole(-5.25f,5.25f,-8.0f,1.0f,0.0f,0.0f,0.5f);
	glPopMatrix();
	glPushMatrix();
	hole[3].drawhole(5.25f,5.25f,-8.0f,1.0f,0.0f,0.0f,0.5f);
	glPopMatrix();
	glPushMatrix();
	hole[4].drawhole(5.25f,-6.25f,-8.0f,1.0f,0.0f,0.0f,0.5f);
	glPopMatrix();
	glPushMatrix();
	hole[5].drawhole(-5.65f,4.25f,-8.0f,1.0f,0.0f,0.0f,0.5f);
	glPopMatrix();
	glPushMatrix();
	hole[6].drawhole(5.635f,4.25f,-8.0f,1.0f,0.0f,0.0f,0.5f);
	glPopMatrix();
	glPushMatrix();
	hole[7].drawhole(5.65f,-5.25,-8.0f,1.0f,0.0f,0.0f,0.5f);
	glPopMatrix();
	/*//holes on striker boxes
	float x1 = 0.55f,y1 = 0.65f,x2 = -0.55f,y2 = 0.65f;
	for(int i = 0;i < 9;i++)
	{
	if(i < 4)
	{
	glPushMatrix();
	hole[i].drawhole(x1,y1,-8.0f,1.0f,0.0f,0.0f,0.1f);
	glPopMatrix();
	float temp = x1;
	x1 =(-y1);
	y1 = temp;
}
else if(i > 4)
{
	glPushMatrix();
	hole[i].drawhole(x2,y2,-8.0f,1.0f,0.0f,0.0f,0.1f);
	glPopMatrix();
	float temp = x2;
	x2 =(-y2);
	y2 = (temp);
}
}*/

// striker
glPushMatrix();
//glTranslatef(-2.2f, 0.0f, -8.0f);
//glTranslatef(-2.35f, 0.5f, -8.0f);
s[0].drawstriker(tri_x,tri_y,-8.0f,0.5f,0.5f,0.5f,0.4f);
//s[0].drawstriker(8.0f,0.0f,-8.0f,0.5f,0.5f,0.5f,0.4f);
glPopMatrix();
//draw line
//glPushMatrix();
//glBegin(GL_LINES);
//glVertex2f(tri_x,tri_y-0.035f);
//glVertex2f(tri_x,tri_y-0.6f);
//glColor3f(1.0f,1.0f,1.0f);
//glPopMatrix();
//power bar
/*glPushMatrix();
glBegin(GL_LINES);
glColor3f(1.0f,0.0f,0.0f);
glVertex2f(-0.92f,0.0f);
glVertex2f(-0.92f,-0.60f);
glEnd();
glPopMatrix();
glPushMatrix();
p.drawhole(-0.92f,power_ball,0.0f,0.0f,1.0f,0.0f,0.02f);
glPopMatrix();*/
// speedometer
    glTranslatef(10.0f, -2.4f, -8.0f);
    glPushMatrix();
    glBegin(GL_QUADS);
    glColor3f(0.0,1.0,0.0);
    glVertex2f(2.75,-7.0);
    glVertex2f(2.0,-7.0);
    glVertex2f(2.0,pointer);
    glVertex2f(2.75,pointer);
    glColor3f(1.0,0.0,0.1);
    glVertex2f(2.0,10.0);
    glVertex2f(2.75,10.0);
    glVertex2f(2.75,pointer);
    glVertex2f(2.0,pointer);
    glEnd();
    //glBegin(GL_LINES);
    glColor3f(0.4,0.3,0.1);
    glVertex2f(0.48,pointer);
    glVertex2f(0.55,pointer);
    //glEnd();
    glPopMatrix();
glEnd();
glutSwapBuffers();
}

void handleResize(int w, int h) 
{
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0f, (float)w / (float)h, 0.1f, 200.0f);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void handleKeypress1(unsigned char key, int x, int y) 
{
	if (key == 27) 
	{
		exit(0);     // escape key is pressed
	}
	if (key == 32)
	{
		printf("space hit\n");
		printf("%f %f\n",s[0].velx,s[0].vely );
		s[0].velx = 1.0f;
		s[0].vely = 1.0f;
		printf("%f %f\n",s[0].velx,s[0].vely );
	}
}

void handleKeypress2(int key, int x, int y) 
{
	if (key == GLUT_KEY_LEFT && tri_x > -5.25f)
		tri_x -= 0.1;
	if (key == GLUT_KEY_RIGHT && tri_x < 5.25f)
		tri_x += 0.1;
	if (key == GLUT_KEY_UP && pointer < 10.0f)
		pointer += 0.1;
	if (key == GLUT_KEY_DOWN && pointer > -6.75f)
		pointer -= 0.1;
}

void handleMouseclick(int button, int state, int x, int y) 
{
	if (state == GLUT_DOWN)
	{
		if (button == GLUT_LEFT_BUTTON)
		{
			theta += 90;
		}
		else if (button == GLUT_RIGHT_BUTTON)
		{
			theta -= 90;
		}
	}

}

void update(int value)
{
	if (s[0].velx != 0.0f || s[0].vely != 0.0f)
	{
		if (tri_x + 0.4f > 8.0f || tri_x - 0.4f < -7.7f)
   			s[0].velx *=-1;
   		if (tri_y + 0.4f > 7.35f || tri_y - 0.4f < -8.35f)
   			s[0].vely *=-1;
	}
	tri_x += s[0].velx;
	tri_y += s[0].vely;
	// if(s[0].velx!=0.0f)
	// 	s[0].velx /=1.01f;
	// if(s[0].vely != 0.0f)
	// 	s[0].vely /=1.01f;
	glutTimerFunc(10,update,0);
}

int main(int argc, char **argv) {

	// Initialize GLUT
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);

	int w = glutGet(GLUT_SCREEN_WIDTH);
	int h = glutGet(GLUT_SCREEN_HEIGHT);
	int windowWidth = w * 2 / 3;
	int windowHeight = h * 2 / 3;

	glutInitWindowSize(windowWidth, windowHeight);
	glutInitWindowPosition((w - windowWidth) / 2, (h - windowHeight) / 2);

	glutCreateWindow("CSE251_sampleCode");  // Setup the window
	initRendering();

	// Register callbacks
	glutDisplayFunc(drawScene);
	glutIdleFunc(drawScene);
	glutKeyboardFunc(handleKeypress1);
	glutSpecialFunc(handleKeypress2);
	glutMouseFunc(handleMouseclick);
	glutReshapeFunc(handleResize);
	glutTimerFunc(10, update, 0);

	glutMainLoop();
	return 0;
}

